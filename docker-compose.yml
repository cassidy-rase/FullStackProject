version: '3.7'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: Go # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on: 
      - mysql-dev # This service depends on mysql. Start that first.
    networks:
      - backend

  # Frontend Service 
  app-client:
    build:
      context: FrontEnd # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: Dockerfile
    ports:
      - "9090:80" # Map the exposed port 80 on the container to port 9090 on the host machine
    restart: always
    links:
      - "mysql-dev"
    depends_on:
      - app-server
    networks:
      - backend

# Database Service (Mysql)
  mysql-dev:
    build:
      context: Database
      dockerfile: Dockerfile
    environment: 
      MYSQL_ROOT_PASSWORD: mysql123
      MYSQL_DATABASE: database
    ports:
      [3308:3306]
    networks:
      [backend]

networks:
  backend:
    driver: "bridge"
  
  



# version: '3.7'
# services:
#   mysql-dev:
#     build:
#       context: 
#       dockerfile: Dockerfile
#     environment: 
#       MYSQL_ROOT_PASSWORD: mysql123
#       MYSQL_DATABASE: database
#     ports:
#       [3308:3306]

# version: '3'
# services:
#   web:
#     build: .
#     ports:
#     - "5000:5000"
#     volumes:
#     - .:/code
#     - logvolume01:/var/log
#     links:
#     - redis
#   redis:
#     image: redis
# volumes:
#   logvolume01: {}